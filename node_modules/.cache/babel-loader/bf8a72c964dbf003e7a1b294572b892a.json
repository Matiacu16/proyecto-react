{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrador\\\\OneDrive\\\\Escritorio\\\\prueba-react\\\\src\\\\store\\\\cartContext.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from \"react\"; // 1. Inicializamos el Context con React.createContext()\n// 2. Creamos un Provider y le damos un \"value\"\n// 3. Definimos los componentes que van a acceder al context (Consumers)\n// 4. Damos a los componentes acceso al context con el hook useContext()\n// 5. Los componentes consumers podrán acceder y \"subscribirse\" al \"value\" del context\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const cartContext = /*#__PURE__*/createContext();\nexport function CartProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [cart, setCart] = useState([]);\n\n  function addToCart(item, count) {\n    if (isInCart(item.id)) {\n      /* el item ya existe */\n    } else {\n      let copyCart = [...cart];\n      copyCart.push({ ...item,\n        quantity: count\n      });\n      setCart(copyCart);\n    }\n  }\n\n  function isInCart(id) {\n    return cart.some(itemInCart => itemInCart.id === id);\n  }\n\n  return /*#__PURE__*/_jsxDEV(cartContext.Provider, {\n    value: {\n      cart,\n      addToCart\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CartProvider, \"ZqFaEIYkzI5UoYUmTgmqHbYYm/0=\");\n\n_c = CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["createContext","useState","cartContext","CartProvider","children","cart","setCart","addToCart","item","count","isInCart","id","copyCart","push","quantity","some","itemInCart"],"sources":["C:/Users/Administrador/OneDrive/Escritorio/prueba-react/src/store/cartContext.jsx"],"sourcesContent":["import { createContext, useState } from \"react\";\r\n// 1. Inicializamos el Context con React.createContext()\r\n// 2. Creamos un Provider y le damos un \"value\"\r\n// 3. Definimos los componentes que van a acceder al context (Consumers)\r\n// 4. Damos a los componentes acceso al context con el hook useContext()\r\n// 5. Los componentes consumers podrán acceder y \"subscribirse\" al \"value\" del context\r\n\r\nexport const cartContext = createContext();\r\n\r\nexport function CartProvider({ children }) {\r\n  const [cart, setCart] = useState([]);\r\n\r\n  function addToCart(item, count) {\r\n    if (isInCart(item.id)) {\r\n        /* el item ya existe */\r\n    }\r\n    else{\r\n      let copyCart = [...cart];    \r\n      copyCart.push( { ...item, quantity: count});\r\n      setCart(copyCart)\r\n    }\r\n   \r\n  }\r\n\r\n  function isInCart(id){\r\n    return ( cart.some(itemInCart => itemInCart.id === id))\r\n  }\r\n\r\n  return (\r\n    <cartContext.Provider value={{ cart, addToCart }}>\r\n    {children}\r\n    </cartContext.Provider>\r\n);\r\n}"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC,C,CACA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,MAAMC,WAAW,gBAAGF,aAAa,EAAjC;AAEP,OAAO,SAASG,YAAT,OAAoC;EAAA;;EAAA,IAAd;IAAEC;EAAF,CAAc;EACzC,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC;;EAEA,SAASM,SAAT,CAAmBC,IAAnB,EAAyBC,KAAzB,EAAgC;IAC9B,IAAIC,QAAQ,CAACF,IAAI,CAACG,EAAN,CAAZ,EAAuB;MACnB;IACH,CAFD,MAGI;MACF,IAAIC,QAAQ,GAAG,CAAC,GAAGP,IAAJ,CAAf;MACAO,QAAQ,CAACC,IAAT,CAAe,EAAE,GAAGL,IAAL;QAAWM,QAAQ,EAAEL;MAArB,CAAf;MACAH,OAAO,CAACM,QAAD,CAAP;IACD;EAEF;;EAED,SAASF,QAAT,CAAkBC,EAAlB,EAAqB;IACnB,OAASN,IAAI,CAACU,IAAL,CAAUC,UAAU,IAAIA,UAAU,CAACL,EAAX,KAAkBA,EAA1C,CAAT;EACD;;EAED,oBACE,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAE;MAAEN,IAAF;MAAQE;IAAR,CAA7B;IAAA,UACCH;EADD;IAAA;IAAA;IAAA;EAAA,QADF;AAKD;;GAxBeD,Y;;KAAAA,Y"},"metadata":{},"sourceType":"module"}